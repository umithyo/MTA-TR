local char_limit = 4;DEFAULT_CHAR_INFO = {	level = 1,	weapons = {		{id = 24, ammo = 50}	},	location = {333.48376, -1802.72144, 4.61762},	dim = 0,	int = 0,};local characters = {};local char_screen = {};addEvent ("onPlayerRequestCharacterList", true);addEventHandler ("onPlayerRequestCharacterList", root, 	function ()		local chars = exports.database:getPlayerCharacterList (client);		triggerLatentClientEvent (client, "login.request_chars", client, chars, exports.database:getPlayerCharacters (client));		char_screen [client] = true;	end);	function checkChars (player)	local chars = exports.database:getPlayerCharacterList (player) or {};	if #chars >= char_limit then 		exports.mtatr_hud:dm ("Maksimum karakter sayısına ulaştığınız için karakter oluşturulamıyor. ("..char_limit.." karakter)", player, 255, 0, 0);		return false;	end		return true;end	addEvent ("onPlayerRequestANewCharacter", true);addEventHandler ("onPlayerRequestANewCharacter", root, 	function ()		if checkChars (client) then 			triggerClientEvent (client, "login.request_char_screen", client, true);		end		end);	addEvent ("onPlayerCreateANewCharacter", true);addEventHandler ("onPlayerCreateANewCharacter", root, 	function (name, age, model, info)		if name and model and checkChars(player) then 			if not exports.database:isCharacterNameAvailable (name) then 				exports.mtatr_hud:dm ("Bu karakter ismini bir başkası kullanıyor, lütfen başka bir isim deneyin.", client, 255, 0, 0);				return;			end				local data = {				age = age,				model = model,				info = info,				creation = getRealTime().timestamp,			};						for i, v in pairs (DEFAULT_CHAR_INFO) do 				data[i] = v;			end							for i, v in pairs (data) do 				local t = exports.database:setPlayerCharacterData (client, name, i, v);			end						local chars = exports.database:getPlayerCharacterList (client);			triggerLatentClientEvent (client, "login.request_chars", client, chars, exports.database:getPlayerCharacters (client));			triggerClientEvent (client, "login.request_char_screen", client, false);		else			exports.mtatr_hud:dm ("Lütfen boş alanları doldurun!", client, 255, 0, 0);		end		end);	addEvent ("onClientPlayerRequestSpawn", true);addEventHandler ("onClientPlayerRequestSpawn", root, 	function (char)		if isPlayerLoggedIn (client) and not getPlayerCurrentCharacter(client) then 			local chars = exports.database:getPlayerCharacters (client);			if chars[char] then 				setPlayerName (client, char);				setElementData (client, "current.char", char);					triggerEvent ("onPlayerCharacterLogin", client, char);				triggerEvent ("onPlayerRequestSpawn", client, client, char);				setTimer (triggerClientEvent, 1000, 1, client, "onSpawnResponded", client);			end			end		end);	function getPlayerCurrentCharacter (player)	return getElementData (player, "current.char");end	function isPlayerOnCharScreen (player)	return char_screen[player];endaddEvent ("onPlayerRequestSpawn");addEventHandler ("onPlayerRequestSpawn", root, 	function ()			char_screen[source] = nil;	end);addEventHandler ("onResourceStop", resourceRoot, 	function ()			for i, v in ipairs (getElementsByType"player") do 			if not isPlayerLoggedIn (v) then 				v:setData ("ID", nil);				v:setData ("current.char", nil);			end				if isPlayerOnCharScreen (v) then 				v:setData ("loggedin", nil);				v:setData ("current.char", nil);			end		end	end);	function isPlayerInGame (player)	return player:getData("loggedin") and player:getData ("current.char");end	
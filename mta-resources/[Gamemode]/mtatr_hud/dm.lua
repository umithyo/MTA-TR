local sx, sy = guiGetScreenSize();local messages = {};local exitting = {};local offset = 25;local limit = 5;local screenW, screenH = guiGetScreenSize();function dm (text, r, g, b)	local text, r, g, b = text or "", r or 200, g or 100, b or 100;		if text and r and g and b then 		if #messages > limit then 			messages[1].start = getTickCount ();			messages[1].y = (limit - 1) * offset;			table.insert (exitting, messages[1]);			table.remove (messages, 1);					end					table.insert (messages,			{				text = text,				r = r, 				g = g, 				b = b,				tick = getTickCount () + (#text * 150),				start = getTickCount (),			}		);		if #messages == 1 then 			addEventHandler ("onClientRender", root, draw_dm);		end		end	endaddEvent ("hud.adddm", true);addEventHandler ("hud.adddm", root, dm);function draw_dm ()	for i, v in ipairs (messages) do 		local rate = (getTickCount () - v.start) / 250; 		local x, y = interpolateBetween (0, -100, 0, 0, (i-1) * offset, 0, rate, "Linear"); 				dxDrawText (v.text, x + 1, y +2, sx +1, 25, tocolor (0, 0, 0, 200), 1.6, "default", "center");		dxDrawText (v.text, x, y, sx, 28, tocolor (v.r, v.g, v.b, 255), 1.6, "default", "center");				if getTickCount() > v.tick then 			v.start = getTickCount ();			v.y = y;			table.insert (exitting, v);			table.remove (messages, i);			if #messages <= 0 then 				removeEventHandler ("onClientRender", root, draw_dm);			end		end		end	endaddEventHandler ("onClientRender", root, 	function ()		for i, v in ipairs (exitting) do 			local rate = (getTickCount () - v.start) / 250; 			local x, y = interpolateBetween (0, v.y, 0, 0, -100, 0, rate, "Linear");						dxDrawText (v.text, x + 1, y + 2, sx + 1, 25, tocolor (0, 0, 0, 200), 1.6, "default", "center");			dxDrawText (v.text, x, y, sx, 28, tocolor (v.r, v.g, v.b, 255), 1.6, "default", "center");									if y >= sy + 100 then 				table.remove (exitting, i);			end		end	end);	------------------------ DRAWNOTE----------------------local DXNotifications = {}local DXNoteSorted = {}local sX,sY = guiGetScreenSize()local aX,aY = sX*0.95, sY*0.95local Z_OFFSET = -25	-- Distance between Notificationslocal VEH_OFFSET = 225	-- Offset of Vehicle HUDlocal PARA_OFFSET = 117	-- Parachute Altimter Offset-- Draw Notification--------------------->>function dNote(id, text, r, g, b, sound, timer)	if (type(id) ~= "string") then return end	if (not text or text == "") then		DXNotifications[id] = nil		for i,v in ipairs(DXNoteSorted) do			if (v == id) then				table.remove(DXNoteSorted, i)				break			end		end		return true	end		if (type(text) ~= "string") then return false end	if (timer and type(timer) ~= "number") then return false end	if (not r or not g or not b or r > 255 or g > 255 or b > 255) then		r, g, b = 255, 255, 255	end		if (not DXNotifications[id]) then		table.insert(DXNoteSorted, id)		if (#DXNoteSorted - 1 == 0) then			addEventHandler("onClientRender", root, rNote)		end	end		DXNotifications[id] = {convertNote(text), r, g, b, timer and getTickCount()+timer or nil}	if sound then 		playSoundFrontEnd(11)	end		return trueendaddEvent("lvdm.dNote", true)addEventHandler("lvdm.dNote", root, dNote)-- Auto-convert to Updated Format -->>function convertNote(str)	local org_str = str	str = ( string.gsub( string.gsub(str, "'", ""), "\"", "") )	if (string.find(str:upper(), "PRESS %w TO ")) then		local key = string.sub(str, 7, 7)		return string.gsub(str, "Press %w to ", "") .. " ["..key.."]"	else return (org_str) endend-- Render Notification----------------------->>function rNote()	if (not isPlayerHudComponentVisible("radar") or isPlayerMapVisible()) then return end	if (#DXNoteSorted == 0) then		removeEventHandler("onClientRender", root, rNote)	end		for i,id in ipairs(DXNoteSorted) do		local v = DXNotifications[id]		if (not v[5] or v[5] > getTickCount()) then			local x,y = aX, aY + (i-1) * Z_OFFSET			if (isPedInVehicle(localPlayer)) then y = y - VEH_OFFSET elseif (getPedWeapon(localPlayer) == 46) then y = y - PARA_OFFSET end								dxDrawText(v[1], x+2, y+2, x+2, y+2, tocolor(0,0,0,255), 2.0, "default", "right", "bottom", false, false, false, false, true)			dxDrawText(v[1], x+2, y, x+2, y, tocolor(0,0,0,255), 2.0, "default", "right", "bottom", false, false, false, false, true)			dxDrawText(v[1], x+2, y-2, x+2, y-2, tocolor(0,0,0,255), 2.0, "default", "right", "bottom", false, false, false, false, true)			dxDrawText(v[1], x, y-2, x, y-2, tocolor(0,0,0,255), 2.0, "default", "right", "bottom", false, false, false, false, true)			dxDrawText(v[1], x-2, y-2, x-2, y-2, tocolor(0,0,0,255), 2.0, "default", "right", "bottom", false, false, false, false, true)			dxDrawText(v[1], x-2, y, x-2, y, tocolor(0,0,0,255), 2.0, "default", "right", "bottom", false, false, false, false, true)			dxDrawText(v[1], x-2, y+2, x-2, y+2, tocolor(0,0,0,255), 2.0, "default", "right", "bottom", false, false, false, false, true)			dxDrawText(v[1], x, y+2, x, y+2, tocolor(0,0,0,255), 2.0, "default", "right", "bottom", false, false, false, false, true)				dxDrawText(v[1], x, y, x, y, tocolor(v[2], v[3], v[4], 255), 2.0, "default", "right", "bottom", false, false, false, false, true)		else			DXNotifications[id] = nil			table.remove(DXNoteSorted, i)		end	endendlocal dmlabel = {	alpha = {		rectangle = 121,		rest = 255	},	decreaseoount = 5}function dmlabel.draw()	local limit = screenW * 0.3250	local x, y, w, h = screenW * 0.3950 , screenH * 0.7811, dxGetTextWidth (dmlabel.text, 1, "default-bold") + 6, screenH * 0.0689 + dxGetFontHeight (1, "default-bold");	if w > limit then 		w = limit;	end		x = (screenW / 2) - (w / 2)	dxDrawRectangle(x, y, w, h, tocolor(0, 0, 0, dmlabel.alpha.rectangle), false)	dxDrawLine (x -1, y -1, x -1, y + h, tocolor(255, 255, 255, dmlabel.alpha.rest), 2, false)	dxDrawLine (x + w, y -1, x -1, y-1, tocolor(255, 255, 255, dmlabel.alpha.rest), 2, false)	dxDrawLine (x -1, y + h, x + w, y + h, tocolor(255, 255, 255, dmlabel.alpha.rest), 2, false)		dxDrawLine (x + w, y + h, x + w, y -1, tocolor(255, 255, 255, dmlabel.alpha.rest), 2, false)	dxDrawText("BİLGİ", x, y - 45, screenW * 0.4472, screenH * 0.7867, tocolor(255, 255, 255, dmlabel.alpha.rest), 1.00, "bankgothic", "left", "top", false, false, false, false, false)	dxDrawText(dmlabel.text, x + 15, y, x + w - 15, y + h, tocolor(255, 255, 255, dmlabel.alpha.rest), 1, "default-bold", "center", "center", true, true, false, false, false)	if dmlabel.tick <= getTickCount() then 		dmlabel.alpha.rest = dmlabel.alpha.rest - dmlabel.decreaseoount;		dmlabel.alpha.rectangle = dmlabel.alpha.rectangle - dmlabel.decreaseoount/2;		if dmlabel.alpha.rest <= 0 or dmlabel.alpha.rectangle <= 0 then 			removeEventHandler("onClientRender", root, dmlabel.draw);			dmlabel.drawing = false		end		endendaddEvent ("notifications.dmlabel", true)function dmn(text)	if text == false then 		dmlabel.tick = getTickCount();		dmlabel.decreaseoount = 20;		return	end		if dmlabel.drawing then		removeEventHandler("onClientRender", root, dmlabel.draw);	end	playSound ("sounds/tick.mp3");	dmlabel.drawing = true;	dmlabel.alpha.rest = 255;	dmlabel.alpha.rectangle = 121;	dmlabel.decreaseoount = 5;	dmlabel.text = tostring (text);	dmlabel.tick = getTickCount() + (#text * 150);	addEventHandler("onClientRender", root, dmlabel.draw);endaddEventHandler ("notifications.dmlabel", root, dmn);
--grid to load, edit to search, table to hold data, loadback to make grid load old data, criteria1, criteria2, ...function searchInGrid (grid, edit, tbl, loadback, ...)	guiGridListClear(grid);	local search = guiGetText(edit);	if search == "" then call (sourceResource, loadback); return end	for k, v in pairs(tbl) do		for i, key in ipairs (arg) do 				local crit = tbl[k][key];			if crit and crit ~= "" then				if string.find(crit:lower(), string.lower(search)) then					local row = guiGridListAddRow(grid)					for j, index in ipairs (arg) do 						guiGridListSetItemText (grid, row, j, v[index] or 1, false, false)					end					end			end		end		end	end	function RGBToHex(red, green, blue, alpha)	if((red < 0 or red > 255 or green < 0 or green > 255 or blue < 0 or blue > 255) or (alpha and (alpha < 0 or alpha > 255))) then		return nil	end	if(alpha) then		return string.format("#%.2X%.2X%.2X%.2X", red,green,blue,alpha)	else		return string.format("#%.2X%.2X%.2X", red,green,blue)	endendfunction comma_value( n )	local left,num,right = string.match(n,'^([^%d]*%d)(%d*)(.-)$')	return left..(num:reverse():gsub('(%d%d%d)','%1,'):reverse())..rightendfunction math.round(number, decimals, method)    decimals = decimals or 0    local factor = 10 ^ decimals    if (method == "ceil" or method == "floor") then return math[method](number * factor) / factor    else return tonumber(("%."..decimals.."f"):format(number)) endendlocal function _todate(timestamp)	local timestamp = tonumber(timestamp) or 0	local year = math.floor(timestamp/31557600)+1970	local isLeapYear = false	if ((year % 4 == 0 and year % 100 ~= 0) or (year % 400 == 0)) then		isLeapYear = true	end	local daysLeft = math.floor((timestamp-((year-1970)*31557600))/86400)+1	local month = 1	if (daysLeft <= 31) then		month = 1		return daysLeft, month, year	end	daysLeft = daysLeft - 31	if ((daysLeft <= 28) or (isLeapYear and daysLeft <= 29)) then		month = 2		return daysLeft, month, year	end	if (not isLeapYear) then		daysLeft = daysLeft - 28 else daysLeft = daysLeft - 29 end	if (daysLeft <= 31) then		month = 3		return daysLeft, month, year	end	daysLeft = daysLeft - 31	if (daysLeft <= 30) then		month = 4		return daysLeft, month, year	end	daysLeft = daysLeft - 30	if (daysLeft <= 31) then		month = 5		return daysLeft, month, year	end	daysLeft = daysLeft - 31	if (daysLeft <= 30) then		month = 6		return daysLeft, month, year	end	daysLeft = daysLeft - 30	if (daysLeft <= 31) then		month = 7		return daysLeft, month, year	end	daysLeft = daysLeft - 31	if (daysLeft <= 31) then		month = 8		return daysLeft, month, year	end	daysLeft = daysLeft - 31	if (daysLeft <= 30) then		month = 9		return daysLeft, month, year	end	daysLeft = daysLeft - 30	if (daysLeft <= 31) then		month = 10		return daysLeft, month, year	end	daysLeft = daysLeft - 31	if (daysLeft <= 30) then		month = 11		return daysLeft, month, year	end	daysLeft = daysLeft - 30	month = 12	if (daysLeft > 31) then daysLeft = 31 end	return daysLeft + 1, month, yearendfunction todate (ts)	local d, m, y = _todate (ts);	return d.."/"..m.."/"..y;end	function _totime(timestamp)	local timestamp = tonumber(timestamp) or 0	local timestamp = timestamp - (math.floor(timestamp/86400) * 86400)	local hours = math.floor(timestamp/3600)	timestamp = timestamp - (math.floor(timestamp/3600) * 3600)	local mins = math.floor(timestamp/60)	local secs = timestamp - (math.floor(timestamp/60) * 60)	return hours, mins, secsendfunction totime (timestamp, include_hour)	local hours, mins, secs = _totime (timestamp);	hours, mins, secs = string.format ("%02d", hours), string.format ("%02d", mins), string.format("%02d", secs);	return include_hour == true and hours..":" or "" ..mins..":"..secs;endfunction flashBlip (blip, _hide, helement, hspeed, hrepeat)	if not isElement (blip) then return end	local flash = false;	local speed, _repeat = hspeed or 500, hrepeat or 20;	local hide = _hide == true or false;	local element = helement or root;		setTimer (		function (b, e)			if isElement (b) and isElement (e) then 				flash = not flash;				if not flash then 					setElementVisibleTo (b, e, true);				else					setElementVisibleTo (b, e, false);				end				end			end,	speed, _repeat, blip, element);	if hide then 		setTimer (			function (b, e)				if isElement (b) then 					setElementVisibleTo (b, e, false);				end				end,		(speed * _repeat) + 1000, 1, blip, element);		end	end	